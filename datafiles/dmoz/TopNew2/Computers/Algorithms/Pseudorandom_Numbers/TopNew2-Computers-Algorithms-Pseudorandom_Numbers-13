home cv cv ( hebrew ) fpga editor free software lectures perlilog eobj frandom cdepend hitec ( latex ) easyspec peakdet fifo tricks cdce906 optical simulator html highlighting hobbies tech blog frandom frandom is a linux kernel random number generator , which is 10-50 times faster than what you get from linux ' built-in /dev/urandom. and it uses very little ( /dev/frandom ) or none ( /dev/erandom ) of the kernel 's entropy pool , so it is very useful for applications that require a handy source for lots of random data . its most common use seems to be wiping large hard disks with random data before encryption. it 's currently supporting 2.6 kernels , but was originally written for version 2.2 . download the kernel module tarball . and here 's some answers to things you might ask yourself : is n't /dev/urandom enough ? discussions about the necessity of a faster kernel random number generator rise and fall since 1996 ( that i know of ) . my opinion is that /dev/frandom is as necessary as /dev/zero , which merely creates a stream of zeroes. the common opposite opinion usually says : do it in user space . what 's the difference between /dev/frandom and /dev/erandom ? in the beginning i wrote /dev/frandom . then it turned out that one of the advantages of this suite is that it saves kernel entropy. but /dev/frandom consumes 256 bytes of kernel random data ( which may , in turn , eat some entropy ) every time a device file is opened , in order to seed the random generator . so i made /dev/erandom , which uses an internal random generator for seeding. the " f " in frandom stands for " fast " , and " e " for " economic " : /dev/erandom uses no kernel entropy at all . how fast is it ? depends on your computer and kernel version. tests consistently show 10-50 times faster than /dev/ u random . will it work on my kernel ? it most probably will , if it 's > 2.6 is it stable ? since releasing the initial version in fall 2003 , at least 100 people have tried it ( probably many more ) on i686 and x86_64 systems alike . successful test reports have arrived , and zero complaints. so yes , it 's very stable. as for randomness , there have n't been any complaints either . how is random data generated ? frandom is based on the rc4 encryption algorithm , which is considered secure , and is used by several applications , including ssl. let 's start with how rc4 works : it takes a key , and generates a stream of pseudo-random bytes . the actual encryption is a xor operation between this stream of bytes and the cleartext data stream . now to frandom : every time /dev/frandom is opened , a distinct pseudo-random stream is initialized by using a 2048-bit key , which is picked by doing something equivalent to reading the key from /dev/ u random . the pseudo-random stream is what you read from /dev/frandom . frandom is merely rc4 with a random key , just without the xor in the end . does frandom generate good random numbers ? due to its origins , the random numbers ca n't be too bad. if they were , rc4 would n't be worth anything . as for testing : data directly " copied " from /dev/frandom was tested with the " diehard " battery of tests , developed by george marsaglia. all tests passed , which is considered to be a good indication . can frandom be used to create one-time pads ( cryptology ) ? frandom was never intended for crypto purposes , nor was any special thought given to attacks. but there is very little room for attacking the module , and since the module is based upon rc4 , we have the following fact : using data from /dev/frandom as a one-time pad is equivalent to using the rc4 algorithm with a 2048-bit key , read from /dev/ u random . bottom line : it 's probably ok to use frandom for crypto purposes. but do n't. it was n't the intention . last modified on thu may 17 17 : 30 : 00 2012. e-mail :
