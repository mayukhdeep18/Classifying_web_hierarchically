kopfzeile unu.ran - universal non-uniform random number generators menueleiste unu.ran manual download documentation other software arvag unu.ran ( universal non-uniform random number generator ) is a collection of algorithms for generating non-uniform pseudorandom variates as a library of c functions designed and implemented by the arvag ( automatic random variate generation ) project group in vienna , and released under the gnu public license ( gpl ) . it is especially designed for such situations where a non-standard distribution or a truncated distribution is needed . experiments with different types of distributions are made . random variates for variance reduction techniques are used . fast generators of predictable quality are necessary . of course it is also well suited for standard distributions . however due to its more sophisticated programming interface it might not be as easy to use if you only look for a generator for the standard normal distribution. ( although unu.ran provides generators that are superior in many aspects to those found in quite a number of other libraries. ) unu.ran implements several methods for generating random numbers . the choice depends primary on the information about the distribution can be provided and - if the user is familar with the different methods - on the preferences of the user . the design goals of unu.ran are to provide reliable , portable and robust ( as far as this is possible ) functions with a consisent and easy to use interface. it is suitable for all situation where experiments with different distributions including non-standard distributions . for example it is no problem to replace the normal distribution by an empirical distribution in a model . originally designed as a library for so called black-box or universal algorithms its interface is different from other libraries . ( nevertheless it also contains special generators for standard distributions. ) it does not provide subroutines for random variate generation for particular distributions. instead it uses an object-oriented interface . distributions and generators are treated as independent objects . this approach allows one not only to have different methods for generating non-uniform random variates. thus it is possible to choose the one which is optimal in for the situation ( e.g. speed , quality of random numbers , using for variance reduction techniques , etc. ) . it also allows to sample from non-standard distribution or even from distributions that arise in a model and can only be computed in a complicated subroutine . sampling from a particular distribution requires the following steps : create a distribution object . ( objects for standard distributions are available in the library ) choose a method . initialize the generator , i.e. , create the generator object . if the choosen method is not suitable for the given distribution ( or if the distribution object contains too little information about the distribution ) the initialization routine fails and produces an error message. thus the generator object does ( probably ) not produce false results ( random variates of a different distribution ) . use this generator object to sample from the distribution . for details see the online documentation . there are four types of objects that can be manipulated independently : distribution objects : hold all information about the random variates that should be generated. the following types of distributions are available : continuous and discrete distributions empirical distributions multivariate distributions of course a library of standard distributions is included ( and these can be further modified to get , e.g. , truncated distributions ) . moreover the library provides subroutines to build almost arbitrary distributions . generator objects : hold the generator for the given distribution . it is possible to build independent generator objects for the same distribution object which might use the same or different methods for generation . ( if the choosen method is not suitable for the given method , a null pointer is returned in the initialization step ) . parameter objects : each transformation method requires several parameters to adjust the generator to a given distribution. the parameter object holds all this information . when created it contains all necessary default settings . it is only used to create a generator object and destroyed immediately . altough there is no need to change these parameters or even know about their existence for " usual distributions " , they allow a fine tuning of the generator to work with distributions with some awkward properties . the library provides all necessary functions to change these default parameters . uniform random number generators : all generator objects need one ( or more ) streams of uniform random numbers that are transformed into random variates of the given distribution. these are given as pointers to appropriate functions or structures ( objects ) . two generator objects may have their own uniform random number generators or share a common one . any functions that produce uniform ( pseudo- ) random numbers can be used . we suggest otmar lendl 's prng library . the unu.ran library is included in several software packages : root ( an object-oriented data-analysis framework ) the r project for statistical computing ( see package runuran ) . ssj ( stochastic simulation in java ) . ecolab ( software package and a research project that is looking at the dynamics of evolution ) . for remarks , problems , questions , suggestions please contact josef leydold . the current version of this package can be found at the home page of the arvag ( automatic random variate generation ) project group in vienna . this article is translated to serbo-croatian language by jovana milutinovich from web geeks resources . menueleiste unu.ran manual download documentation other software arvag fusszeile josef leydold ( november 17 , 2009 ) research supported by
