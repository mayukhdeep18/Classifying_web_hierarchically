ssi : banner , global search , global navigation menus nist header and global search search csrc : global banner and navigation menus nist , computer security division , computer security resource center top menu ( general links ) contact site map main menu ( main links ) csrc home about csd projects / research cryptographic technology education & outreach fisma & cybersecurity initiatives identity management & access control security automation & vulnerability management systems & emerging technologies validation programs & testing a-z list of projects past projects publications draft publications fips publications nist special publications ( sps ) nistirs itl bulletins by topic/project by security control family by legal requirement journal articles and other papers early computer security papers ( 1970-1985 ) other historical papers news & events federal register notices federal register notices archives news news archive events events archive random number generation download documentation and software activities publications and presentations guide to statistical tests references rng standards development bodies rng and testing technical working group batteries of statistical tests for rng contacts csrc home groups st cryptographic toolkit rng random number generation the three primary goals were : ( a ) to develop a battery of statistical tests to detect non-randomness in binary sequences constructed using random number generators and pseudo-random number generators utilized in cryptographic applications , ( b ) to produce documentation and a software implementation of these tests , and ( c ) to provide guidance in the use and application of these tests . description since 1997 , the random number generation technical working group ( rng-twg ) has been working on developing a battery of statistical tests suitable in the evaluation of random number generators and pseudo-random number generators used in cryptographic applications. currently , we are finalizing the documentation and software in preparation for public release. an excerpt from the document is provided below . summary the need for random and pseudorandom numbers arises in many cryptographic applications. for example , common cryptosystems employ keys that must be generated in a random fashion. many cryptographic protocols also require random or pseudorandom inputs at various points , e.g. , for auxiliary quantities used in generating digital signatures , or for generating challenges in authentication protocols. nist special publication 800-22 a statistical test suite for random and pseudorandom number generators for cryptographic applications , discusses some aspects of selecting and testing random and pseudorandom number generators . generators suitable for use in cryptographic applications may need to meet stronger requirements than for use in other applications. in particular , their outputs may need to be unpredictable in the absence of knowledge of the inputs. some criteria for characterizing and selecting appropriate generators are discussed in this document. the subject of statistical testing and its relation to cryptanalysis is also discussed , and some recommended statistical tests are provided. these tests may be useful as a first step in determining whether or not a generator is suitable for a particular cryptographic application. however , no set of statistical tests can absolutely certify a generator as appropriate for usage in a particular application , i.e. , statistical testing can not serve as a substitute for cryptanalysis. the design and cryptanalysis of generators is outside the scope of this paper . page footer starts here : info , contact email , update/create dates insert contact info for this section here. default contact : csrc webmaster cryptotoolkit webmaster , disclaimer notice & privacy policy nist is an agency of the u.s. department of commerce insert creation date. last updated date is automatically generated last updated : # begindate format : am1 july 16 , 2014 # enddate page created : december 8 , 2000 footer section ends here
