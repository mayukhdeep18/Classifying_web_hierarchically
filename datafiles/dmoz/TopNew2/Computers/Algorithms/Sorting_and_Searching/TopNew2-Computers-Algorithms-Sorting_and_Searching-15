robsort.org home of the robsort sorting algorithm . abstract robsort in a gnu public license sorting algorithm devleloped by robert thompson . robsort uses random number generation to sort arrays of integers. it is claimed to be the world 's least efficient sorting algorithm. scientists have calculated the robsort algorithm to approach an order of [ n ! ] ( n factorial ) inefficiency , however this inefficiency could only theoretically be obtained by using truly random numbers. the robsort source code is an implemenation/demonstration of this algorithm for both unix and windows machines . 5/27/03 - it has been brought to my attention that a similarly inefficient o [ n ! ] sorting algorithm was possibly in existence before robsort , for more information goto the bogosort homepage. an implementation of bogosort can be found here , however unlike robsort , this implementation of bogosort does not appear to be multi-threaded and will only use one processor . download robsort robsort v1.0 * nix source robsort v0.86 windows 9x/nt/2000 binary robsort is featured on sourceforge robsort is also featured on freshmeat robsort q&a how does robsort work ? robsort reads an array of integers and randomly arranges the order of those integers. it then checks to see if the array is sorted , if the array is sorted , robsort has done its job. if the array is not sorted , robsort ranomizes the array again. it continues this process untill it successfully sorts the array . why would i use robsort instead of some other more efficient sorting algorithm ? because robsort is more inefficient . scientists who study inefficiency use robsort to prove specific aspects of number theory. robsort is used as a benchmark for measuring algorithm efficiency , it is the benchmark by which all other sorting algorithms are measured . why is robsort gnu software ? although the science behind robsort is obviously patentable , robert thompson has chosen the gnu public license because he holds that this technology is universal and should be " owned " by the general public. also , robert wants to make robsort available for educational and research purposes without financial barriers . when i try to run robsort , i get the message : segmentation fault ( core dumped ) ? in an effort to maintain maximum inefficiency , robsort often produces this message. this is not an error , rather it is a message stating that the operating system has dumped its memory and register contents to disk for the purposes of debugging. it usually means that the computer robsort is being run on can not handle robsort . scientists who use robsort analyze the 'core ' files whic h are produced to determine which hardware upgrades are necessary to properly run the application . how long does robsort take to sort integers ? since robsort nears order n factorial inefficiency , the amount of time required to sort an array depends drastically on the siz e of the array. start with a small number of integers , say around 9 , and work up . there is no limit , however scientists hav e currently been unable to sucessfully sort 17 or more integers using robsort due to its incredible inefficiency . does robsort utilize multiple processors ? yes , robsort is written with posix threads support. lightweight robsort processes are automatically distributed to free processors by the operating system. threads allow robsort to inefficiently use all available processors. the windows 9.x/nt/2000 version of robsort does not currently support threads . how do i tell robsort what integers i want to sort ? place the integers you wish to robsort in a file called sortdata.txt. sortdata.txt must contain 1 line of integers with spaces seperating them and it must be located in the same directory as the robsort binary . http : //rob.sun3.org
