levenshtein-algorithm fault-tolerant search implementation demos the levenshtein-algorithm english deutsch how levenshtein works.. . the levenshtein algorithm ( also called edit-distance ) calculates the least number of edit operations that are necessary to modify one string to obtain another string . the most common way of calculating this is by the dynamic programming approach. a matrix is initialized measuring in the ( m,n ) -cell the levenshtein distance between the m-character prefix of one with the n-prefix of the other word. the matrix can be filled from the upper left to the lower right corner. each jump horizontally or vertically corresponds to an insert or a delete , respectively . the cost is normally set to 1 for each of the operations. the diagonal jump can cost either one , if the two characters in the row and column do not match or 0 , if they do. each cell always minimizes the cost locally. this way the number in the lower right corner is the levenshtein distance between both words. here is an example that features the comparison of " meilenstein " and " levenshtein " : there are two possible paths through the matrix that actually produce the least cost solution. namely " = " match ; " o " substitution ; " + " insertion ; " - " deletion though there are sophisticated improvements on the complexity , there is no alternative to calculating the matrix to at least a large extent. to the author 's knowledge the only company to implement the fastest levensthein algorithm is exorbyte . more information levenshtein-algorithm fault-tolerant search implementation demos levenshtein-links levenshtein-faqs feedback - imprint
