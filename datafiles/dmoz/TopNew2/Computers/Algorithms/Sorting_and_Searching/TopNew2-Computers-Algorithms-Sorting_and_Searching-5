explored , designed , delivered. sm & # 8482 ; creativyst docs understanding the soundex algorithm level 1 navigation bar home products support/doc developers forums associates ( ? ) level 2 nav menu contact | news | glossary | site l2 menu = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = completely out of tables here = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = documents = = = = = = = = = = = = = = = = = = = = = = = = = = = = end documents = = = = = = = = = = = = = = the rest of the left pedestal how to : understanding classic soundex algorithms search names & phrases based on phonetic similarity ( w/ source code ) use our soundex generator form below. contents overview history the algorithm as an outline discussion enhancements soundex and the census soundex limitations permissions resources source code : in c javascript perl vb soundex converter form related reading pagetoc [ top ] overview terms that are often misspelled can be a problem for database designers. names , for example , are variable length , can have strange spellings , and they are not unique. american names have a diversity of ethnic origins , which give us names pronounced the same way but spelled differently and vice versa. words too , can be misspelled or have multiple spellings , especially across different cultures or national sources. to help solve this problem , we need phonetic algorithms which can find similar sounding terms and names. just such a family of algorithms exist and have come to be called soundex algorithms. a soundex search algorithm takes a written word , such as a person 's name , as input , and produces a character string that identifies a set of words that are ( roughly ) phonetically alike. it is very handy for searching large databases when the user has incomplete data. the method used by soundex is based on the six phonetic classifications of human speech sounds ( bilabial , labiodental , dental , alveolar , velar , and glottal ) , which are themselves based on where you put your lips and tongue to make the sounds. the algorithm itself is fairly straight forward to code and requires no backtracking or multiple passes over the input word. in fact , it is so straight forward , i will start ( after a history section ) by presenting it as an outline . further on , i will give c , javascript , perl , and vb code that implements the two standard algorithms used in the american census as well as an enhanced version , which is described in this article. [ top ] history the original soundex algorithm was not named soundex. index systems similar to what we now call " soundex " were originally developed and used for indexing american census records in the late nineteenth , and early 20th century. an algorithm that is now considered the predessesor to soundex began in a patent application filed by robert c. russell in 1917. it was simply titled " index " . the name " soundex " came along later , and was first registered as a trademark in 1926. the trademarked term was originally issued to kardex systems , inc. later , in the late 1960 's through early 1980 's , soundex was used by the american telegraph & telephone company ( at&t ) in their 411 telephone information service. in the years before speech recognition systems came into use , information inquiries were handled by human operators. soundex proved to be the best way to access phone number information in response to person and place names that were spoken over telephones. the original patent titled " index " was issued in 1918 as patent number 1,261,167 ( filed oct. 25 , 1917 ) . other patents by russell involved index systems and indexing gadgets. some were variations and improvements of his 1917 index system : 1,261,167 ( index filed 1917 , issued 1918 * * ) 1,357,653 ( card-index , filed 1919 ) 1,478,765 ( card-index , filed 1922 ) 1,478,672 ( card-index , issued 1923 ) 1,548,752 ( card-index , filed 1923 ) 1,548,753 ( card-index , filed 1923 ) 1,601,925 ( card-index , filed 1924 ) these should link to google patents ? there are considerable and reliable sources on the web ( as well as the usual unreliable source ) naming one margaret o'dell as a co-inventor , but i have not been able to find any actual evidence of this. if you have information showing margaret o'dell to be a co-inventor of any of these patents , please contact me . so that she can be given credit here for her contributions. also the patent filed in 1917 ( 1,261,167 ) is not a perfect match for present-day soundex algorithms but is considered the first soundex because it is very similar to the algorithms we use today. russell did produce at least one earlier index system that assigned numbers to " key-letters " which he had filed a patent application for a couple of years earlier. none of these patents , as far as i can tell , list any inventor named o'dell. * * finally , russell 's patent number 1,261,167 was reissued in 1923 as # re.15,582. [ top ] the algorithm as an outline 1 capitalize all letters in the word and drop all punctuation marks. pad the word with rightmost blanks as needed during each procedure step. 2 retain the first letter of the word. 3 change all occurrence of the following letters to '0 ' ( zero ) : 'a ' , e ' , 'i ' , 'o ' , 'u ' , 'h ' , 'w ' , 'y'. 4 change letters from the following sets into the digit given : 1 = 'b ' , 'f ' , 'p ' , 'v ' 2 = 'c ' , 'g ' , 'j ' , 'k ' , 'q ' , 's ' , 'x ' , 'z ' 3 = 'd','t ' 4 = 'l ' 5 = 'm','n ' 6 = 'r ' 5 remove all pairs of digits which occur beside each other from the string that resulted after step ( 4 ) . 6 remove all zeros from the string that results from step 5.0 ( placed there in step 3 ) 7 pad the string that resulted from step ( 6 ) with trailing zeros and return only the first four positions , which will be of the form < uppercase letter > < digit > < digit > < digit > . [ top ] discussion the algorithm presented above here is slightly different than the originally patented algorithm. the original soundex algorithm of 1918 starts to fail when the number of words in the database gets to be large. for example , the diversity of names in a large database with many foreign spellings starts to put more and more phonetically unlike names into the same code. the slightly improved algorithm presented here differs from the original in a variety of way. for example , it differs in step three , where the vowel sounds are replaced with zeros ( '0 ' ) , and in step ( 6.0 ) where those zeros are removed. the original algorithm eliminated the vowels completely in step 3.0 , before duplicate adjacent digits are removed. this improved version will produce soundex codes with duplicate digits in them ; for example , " herman " will code to " h06505 " which will then reduce to " h655 " in the last step. in the original version , " herman " would code to " h655 " which will then reduce to " h65 " and finally to " h650 " in the last step. other soundex algorithms exist as well , such as leaa codes used in crime prevention databases , and cutter tables used by libraries to encode author names. each has its advantages and disadvantages. for example , cutter tables have as an advantage , that the codes produced maintain the alphabetical order of the original material. [ top ] enhancements it 's not hard to think of improvements that will make this already powerful algorithm even more robust. an example ( at least to american pronunciation sensibilities ) might include replacing many multi-letter sequences that produce unrelated sounds before performing the steps of the basic algorithm. for example , before starting the above procedure , replace : dg with g gh with h ...when... not at start of word gn with n ( not 'ng ' ) kn with n ph with f mp with m ...when... it is followed by s , z , or t ps with s ...when... it starts a word pf with f ...when... it starts a word mb with m tch with ch a or i with e when - starts word + followed by [ aeio ] ( not in source code... ) the conversion enhancement for pf would not normally be needed because both letters are in the same group ( group 1 ) . however , since this conversion improvement is only for the start of the word , it must be included , since the first letter is preserved in this and classic soundex. challenge : can you think of more ways to improve this basic soundex algorithm ? [ top ] soundex and the census the u.s. census has been making use of soundex codes to index surnames since the late 1800 's. those doing census lookups must use the same method to encode surnames as the census takers did when they generated the database. that means , for starters , our clever set of enhancements ca n't be used. with one exception , the 'normal ' method of encoding the census soundex codes is identical to that described in the algorithm as outline section above. the exception is a special rule for the letters h and w . in the method described above , if two letters from the same group are on either side of a vowel , an 'h ' , or a 'w ' , they are considered two separate letters and they are not removed by the 'remove adjacent digits ' step ( 5 ) . but in 'normal ' census soundex , the 'h ' and 'w ' were completely removed from the conversion when surrounding letters were in the same group , so letters from the same group were combined into a single digit when only 'h ' or 'w ' were between them. for example : normal census method : ashcroft = a261 the 's ' and 'c ' are both from group 2 , and the 'h ' is not considered a vowel-like separator , so the two are considered adjacent 2s which are combined into a single 2. asicroft = a226 here , since vowels are considered separators , the two letters from group 2 are not adjacent and so do not get turned into a single 2. ok , that is the normal method that was used by the census to produce soundex codes. now comes a little twist. prior to the 1920 census these codes were calculated by hand and many census takers ignored the special rule for 'h ' , and 'w'. that means they wrote their census codes exactly as described in the algorithm as outline section above. in other words : special census method : ashcroft = a226 no special rule was applied for the psuedo-vowels h or w so 'shc ' was interpretted as two separated ( not adjacent ) letters , hence there are two '2 ' digits in a row. so the census for 1880 through 1910 included normal census soundex codes as well as these special codes randomly intermixed. for this reason you must search these years using soundex indexes made in both ways. for our soundex function code , we will use a parameter called censusoption . we will call the normal method of calculating the census soundex method 1. we will call the incorrect special method sometimes used in pre-1920 censuses method 2. if we do n't need census compatible codes , we can instruct our function to generate codes using our enhancements by setting censusoption to 0 ( or just not including it at all in languages that permit ) . here it is in a table. censusoption soundex code returned ............... + ................................................... 0 alternative , not census codes our enhanced soundex as documented here ................................................................... 1 normal census codes used in all censuses including 1920 and beyond ................................................................... 2 special census codes used intermittently in 1880 , 1900 , 1910 censuses ................................................................... censusoption soundex code returned 0 not census codes enhanced soundex as documented here 1 normal census codes used in all censuses including 1920 2 special census codes used intermittently in 1880 , * 1900 , 1910 censuses * 1890 census records were destroyed in a fire . also of importance for those searching through census records : often census takers would leave off the prefix in names that had prefixes when producing soundex codes ( nobody 's really sure why ) . in this case the soundex for the name vandrake ( for example ) might have the soundex calculated only for 'drake'. one more thing - out on the web , some are saying the incorrect " special " census codes documented here are actually the correctly done census codes , while those that followed the special rule for 'h ' and 'w ' were the ones done in error. they are wrong. fortunately though , you do n't have to decide which side to believe ( but , still , have i ever lied to you ? : - ) ) . simple logic should provide enough evidence to allow you to draw your own conclusion. consider... in order to accept the argument that : 'codes that lack a special rule for 'h ' and 'w ' are the " correct " codes ' , you would have to believe that those census takers who " mistakenly " followed the special rule for 'h ' and 'w ' all spontaneously made up the exact same non-existent rule for 'h ' and 'w'. in other words , with such an argument , you 're not asked to believe they accidentally ignored a special rule for 'h ' and 'w'. instead , you 're being asked to believe they all independently created the exact same errant rule out of whole-cloth , and then followed it. that 's many different individuals in different states... nothing more is really needed... < li > and what should we make of the 1920 census , where they are all done in accordance with the normal census rules as documented in this article ? shall we say all of 1920 was improperly done ? no. if logic makes your eyes glaze over , do n't worry. a very convincing appeal to authority exists : no less than the u.s. national archives ( those who maintain census data ) agree with the position documented here. : - ) see the related reading section below for a link. [ top ] soundex limitations soundex acts as a bridge between the fuzzy and inexact process of human vocal interaction , and the concise true/false processes at the foundation of computer communication. as such , soundex is an inherently unreliable interface. for this reason , soundex is only usable in applications that can tolerate high false positives ( when words that do n't match the sound of the inquiry are returned ) and high false negatives ( when words that match the sound of the inquiry are not returned ) . this limitation is true even of the best soundex improvement techniques available. as long as you accept and honor this limitation , soundex and its derivatives can be a very useful tool in helping to improve the quality and usefulness of databases. in many instances , unreliable interfaces are used as a foundation , upon which a reliable layer may be built. interfaces that build a reliable layer , based on context , over a soundex foundation may also be possible. [ top ] permissions this article is © copyright , creativyst , inc. 2002 - 2013 all rights reserved. permissions printed over code , dtd , and schema files are supported as our permission statement for these constructs. specifically , the c , javascript , perl , and vb code , -and only the code- , printed in this paper may be copied and modified freely under berkeley style open licensing as described in the comments of each code example. links to this paper are always welcome . however , you may not copy , modify , or distribute this article without first obtaining express written permission from creativyst , inc. those wishing to obtain permission to distribute this paper or derivatives in any form should contact creativyst . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = completely out of tables here begin third page band = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ top ] source code below you will find a set of soundex functions that produce identical results based on identical inputs. they are currently provided in the following languages : c code javascript perl vb these functions are provided under berkeley styled licensing ( included above each function ) . if you 'd like to contribute this function in your own favorite language under your own similar licensing , please let me know. the function they perform will return soundex codes as produced in the census , or enhanced by techniques documented in this article. the javascript version of the function is identical to the one used in the example soundex converter form provided below. the c function is of library grade ( i.e. &quot ; re-usable&quot ; ) and requires no other libraries or classes be linked. the perl function can be used directly without the overhead of < i > text : : soundex < /i > . the javascript function , is used by this article 's < a href = " # soundexconverter " > < b > soundex generator < /b > < /a > form below. < b > note , warning , preliminary : < /b > < br > these functions are currently untested or have not been fully tested. if you 've implemented these and have tested them ( partially or fully ) please let me know. note on internationalization : these functions are only for words that use characters from the first seven bits of utf-8 ( traditionally called 7-bit ascii ) . beware of soundex functions on the web that claim to be international. some will claim , and truly believe , that their code is international simply because they 've used the standard ( internationalized ) library functions to handle strings. this assumption is often simply a mistake made by a real programmer who is an el ni ñ o ( stretching a little for the pun there : - ) sorry ) . ( na& # 239 ; ve at best. : - ) ) < p > by the way , if you need to add latin-1 support to this soundex function , and you understand that programming is n't as easy as people with alternate skill-sets wish , please contact me. i 'll be happy to help. p.s. if you need latin-1 , and you 're an unquoted programmer , please contact me. i 'll be happy to help you with that. these functions are only for languages with alphabets that use the first 7-bits of utf-8 ( traditionally called 7-bit ascii ) . < p > beware of soundex functions on the web that claim to be international. some will claim , and truly believe , that their code is international simply because they 've used the standard ( internationalized ) library functions to handle strings. quoted programmers need to believe that using standard library functions is all that 's required to make their code international , because they 've based their career choices on the notion that programming is really that easy. < p > unquoted programmers know such assumptions about easy-internationalization are na ï ve at best. : - ) soundex in c / * * v 1.0e needs testing * ----------------------- * * the following soundex function is : * * ( c ) copyright 2002 - 2013 , creativyst , inc. * all rights reserved * * for more information go to : * http : //www.creativyst.com * or email : * support @ creativyst.com * * redistribution and use in source and binary * forms , with or without modification , are * permitted provided that the following conditions * are met : * * 1. redistributions of source code must * retain the above copyright notice , this * list of conditions and the following * disclaimer. * * 2. redistributions in binary form must * reproduce the above copyright notice , * this list of conditions and the * following disclaimer in the * documentation and/or other materials * provided with the distribution. * * 3. all advertising materials mentioning * features or use of this software must * display the following acknowledgement : * this product includes software developed * by creativyst , inc. * * 4. the name of creativyst , inc. may not be * used to endorse or promote products * derived from this software without * specific prior written permission. * * this software is provided by creativyst corporation * ` as is' ' and any express or implied warranties , * including , but not limited to , the implied * warranties of merchantability and fitness for a * particular purpose are disclaimed. in no event shall * the author be liable for any direct , indirect , * incidental , special , exemplary , or consequential * damages ( including , but not limited to , * procurement of substitute goods or services ; loss * of use , data , or profits ; or business interruption ) * however caused and on any theory of liability , * whether in contract , strict liability , or tort * ( including negligence or otherwise ) arising in any * way out of the use of this software , even if * advised of the possibility of such damage. * * * ------------------ * ------------------ * function notes : * 1. to avoid all possibility of overwrites make * sure * soundex points to a buffer with at least * 11 bytes of storage. * * 2. this function is for 7/8-bit ascii characters. * modifications are required for utf16/32 , or for * anything other than the first 7-bits of utf-8. * * 3. for those embedded guys who will understand this : * this is a true library-grade ( i.e. re-usable ) function , * meaning it has no dependencies on outside functions * and requires no non-standard libraries be linked in * order for it to work. in this case , since it does n't * even require the standard c library , it is what c99 * ( i think ) calls a : strictly conforming freestanding * function. * * / int soundex ( char * soundex , char * wordstring , int lengthoption , int censusoption ) { int insz = 31 ; char wordstr [ 32 ] ; / * one bigger than insz * / int soundexlen , wslen , i ; char firstletter , * p , * p2 ; soundexlen = wslen = 0 ; soundex [ 0 ] = 0 ; if ( censusoption ) { lengthoption = 4 ; } if ( lengthoption ) { soundexlen = lengthoption ; } if ( soundexlen > 10 ) { soundexlen = 10 ; } if ( soundexlen = insz ) break ; ( * p2 ) = ( * p ) ; } ( * p2 ) = 0 ; / * convert wordstr to * upper-case , without using funcs * from other libraries * / for ( p = wordstr ; ( * p ) ; p + + ) { if ( ( * p ) > = 'a ' && ( * p ) 'z ' ) { ( * p ) = ' ' ; } } / * remove leading spaces * / for ( i = 0 , p = p2 = wordstr ; ( * p ) ; p + + ) { if ( ! i ) { if ( ( * p ) ! = ' ' ) { ( * p2 ) = ( * p ) ; p2 + + ; i + + ; } } else { ( * p2 ) = ( * p ) ; p2 + + ; } } ( * p2 ) = 0 ; / * get length of wordstr * / for ( i = 0,p = wordstr ; ( * p ) ; p + + ) i + + ; / * remove trailing spaces * / for ( ; i ; i-- ) { if ( wordstr [ i ] = = ' ' ) { wordstr [ i ] = 0 ; } else { break ; } } / * get length of wordstr * / for ( wslen = 0,p = wordstr ; ( * p ) ; p + + ) wslen + + ; if ( ! wslen ) { return ( 0 ) ; } / * perform our own multi-letter * improvements * * underscore placeholders ( _ ) will be * removed below. * / if ( ! censusoption ) { if ( wordstr [ 0 ] = = 'p ' && wordstr [ 1 ] = = 's ' ) { wordstr [ 0 ] = '_ ' ; } if ( wordstr [ 0 ] = = 'p ' && wordstr [ 1 ] = = 'f ' ) { wordstr [ 0 ] = '_ ' ; } / * v1.0e gh is g-sound at start of word * / if ( wordstr [ 0 ] = = 'g ' && wordstr [ 1 ] = = 'h ' ) { wordstr [ 1 ] = '_ ' ; } for ( i = 0 ; i [ top ] soundex in javascript / * * v 1.0e needs testing * ----------------------- * * the following soundex function is : * * ( c ) copyright 2002 - 2013 , creativyst , inc. * all rights reserved * * for more information go to : * http : //www.creativyst.com * or email : * support @ creativyst.com * * redistribution and use in source and binary * forms , with or without modification , are * permitted provided that the following conditions * are met : * * 1. redistributions of source code must * retain the above copyright notice , this * list of conditions and the following * disclaimer. * * 2. redistributions in binary form must * reproduce the above copyright notice , * this list of conditions and the * following disclaimer in the * documentation and/or other materials * provided with the distribution. * * 3. all advertising materials mentioning * features or use of this software must * display the following acknowledgement : * this product includes software developed * by creativyst , inc. * * 4. the name of creativyst , inc. may not be * used to endorse or promote products * derived from this software without * specific prior written permission. * * this software is provided by creativyst corporation * ` ` as is' ' and any express or implied warranties , * including , but not limited to , the implied * warranties of merchantability and fitness for a * particular purpose are disclaimed. in no event shall * the author be liable for any direct , indirect , * incidental , special , exemplary , or consequential * damages ( including , but not limited to , * procurement of substitute goods or services ; loss * of use , data , or profits ; or business interruption ) * however caused and on any theory of liability , * whether in contract , strict liability , or tort * ( including negligence or otherwise ) arising in any * way out of the use of this software , even if * advised of the possibility of such damage. * * / function soundex ( wordstring , lengthoption , censusoption ) { var tmpstr ; var wordstr = " " ; var curchar ; var lastchar ; var soundexlen = 10 ; var wslen ; var firstletter ; if ( censusoption ) { lengthoption = 4 ; } if ( lengthoption ! = undefined ) { soundexlen = lengthoption ; } if ( soundexlen > 10 ) { soundexlen = 10 ; } if ( soundexlen [ top ] soundex in perl # v 1.0e needs testing # ----------------------- # the following soundex function is : # # ( c ) copyright 2002 - 2013 , creativyst , inc. # all rights reserved # # for more information go to : # http : //www.creativyst.com # or email : # support @ creativyst.com # # redistribution and use in source and binary # forms , with or without modification , are # permitted provided that the following conditions # are met : # # 1. redistributions of source code must # retain the above copyright notice , this # list of conditions and the following # disclaimer. # # 2. redistributions in binary form must # reproduce the above copyright notice , # this list of conditions and the # following disclaimer in the # documentation and/or other materials # provided with the distribution. # # 3. all advertising materials mentioning # features or use of this software must # display the following acknowledgement : # this product includes software developed # by creativyst , inc. # # 4. the name of creativyst , inc. may not be # used to endorse or promote products # derived from this software without # specific prior written permission. # # this software is provided by creativyst corporation # ` ` as is' ' and any express or implied warranties , # including , but not limited to , the implied # warranties of merchantability and fitness for a # particular purpose are disclaimed. in no event shall # the author be liable for any direct , indirect , # incidental , special , exemplary , or consequential # damages ( including , but not limited to , # procurement of substitute goods or services ; loss # of use , data , or profits ; or business interruption ) # however caused and on any theory of liability , # whether in contract , strict liability , or tort # ( including negligence or otherwise ) arising in any # way out of the use of this software , even if # advised of the possibility of such damage. # # sub soundex { my ( $ wordstring , $ lengthoption , $ censusoption ) = @ _ ; my ( $ wordstr , $ curchar , $ lastchar , $ soundexlen ) ; my ( $ wslen , $ firstletter , $ tmpstr ) ; if ( $ censusoption ) { $ lengthoption = 4 ; } if ( $ lengthoption ) { $ soundexlen = $ lengthoption ; } if ( $ soundexlen > 10 ) { $ soundexlen = 10 ; } if ( $ soundexlen [ top ] soundex in vb ' ' v 1.0d needs testing ' ----------------------- ' ' the following soundex function is : ' ' ( c ) copyright 2002 - 2013 , creativyst , inc. ' all rights reserved ' ' for more information go to : ' http : //www.creativyst.com ' or email : ' support @ creativyst.com ' ' redistribution and use in source and binary ' forms , with or without modification , are ' permitted provided that the following conditions ' are met : ' ' 1. redistributions of source code must ' retain the above copyright notice , this ' list of conditions and the following ' disclaimer. ' ' 2. redistributions in binary form must ' reproduce the above copyright notice , ' this list of conditions and the ' following disclaimer in the ' documentation and/or other materials ' provided with the distribution. ' ' 3. all advertising materials mentioning ' features or use of this software must ' display the following acknowledgement : ' this product includes software developed ' by creativyst , inc. ' ' 4. the name of creativyst , inc. may not be ' used to endorse or promote products ' derived from this software without ' specific prior written permission. ' ' this software is provided by creativyst corporation ' ` ` as is' ' and any express or implied warranties , ' including , but not limited to , the implied ' warranties of merchantability and fitness for a ' particular purpose are disclaimed. in no event shall ' the author be liable for any direct , indirect , ' incidental , special , exemplary , or consequential ' damages ( including , but not limited to , ' procurement of substitute goods or services ; loss ' of use , data , or profits ; or business interruption ) ' however caused and on any theory of liability , ' whether in contract , strict liability , or tort ' ( including negligence or otherwise ) arising in any ' way out of the use of this software , even if ' advised of the possibility of such damage. ' ' ' function soundex ( _ byval wordstring as string , _ byval lengthoption as integer , _ byval censusoption as integer _ ) as string dim wordstr as string dim b , b2 , b3 , soundexlen , firstletter as string dim i as integer ' sanity ' if ( censusoption > 0 ) then lengthoption = 4 end if if ( lengthoption > 0 ) then soundexlen = lengthoption end if if ( soundexlen > 10 ) then soundexlen = 10 end if if ( soundexlen [ top ] related reading the following links provide resources for those who 'd like to learn more about the soundex algorithm , it 's limitations , enhancements , and uses. < script language = " javascript " type = " text/javascript " > showsoundexrefs ( ) ; < /script > incorrect h/w information considers all conversions done in 1920 and most conversions done in the other years to have been done in error < li > < a href = " http : //www.geocities.com/heartland/hills/3916/soundex.html " target = " _blank " ' style = " cursor : help " title = " great explanations of the two varieties of soundex codes used in the census " > surname to soundex converter < /a > surname to soundex converter explanation of census soundex at national archives ( u.s. ) < li > < a href = " http : //www.ir.iit.edu/publications/downloads/ieeesoundexv5.pdf " target = " _blank " style = " cursor : help " title = " very complete studies of some soundex enhancement techniques " > pdf : improving precision and recall for soundex retrieval < /a > 404 on 11-aug-2006 < li > < a href = " http : //www.sog.org.uk/cig/vol6/605christian.pdf " target = " _blank " style = " cursor : help " title = " the failure rate of soundex " > pdf : soundex - can it be improved ? < /a > < li > < a href = " http : //acl.ldc.upenn.edu/a/a88/a88-1028.pdf " target = " _blank " style = " cursor : help " title = " a non-soundex approach " > pdf : computational techniques for improving name search < /a > [ top ] soundex converter form the following form uses the javascript soundex function presented above to produce a soundex code for any word you enter into the field labeled " input word : " . it returns the soundex codes for three different algorithms in the fields below. you may also enter a size for the output code within limits ( 4 to 10 characters ) . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = top portion of form : input = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = creativyst ® soundexr + add to your site pop-up " http : //www.creativyst.com/doc/articles/soundex1/soundexr/sxrweb.htm " input word : size : = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = bottom portion of form : output = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 0 : enhanced soundex : as documented in this article about soundex 1 : normal census properly calculated soundex codes found in all census years . 2 : special census improperly calculated soundex codes found in some of the censuses performed in 1880 , 1900 , and 1910 . < tr > < td align = " right " > output code : &nbsp ; < /td > < td align = " left " > < input name = " outtext " id = " outtext " type = " text " > < /td > < /tr > 0 : enhanced soundex as documented above 1 : normal census properly calculated soundex codes found in all censuses. 2 : special census improperly calculated soundex codes found in some of the censuses performed in 1880 , 1900 , and 1910. to test differences in the enhanced soundex option , use words and names like knightridder , psychology , and pflanders . the word knight will demonstrate two different enhancements as you type it. to see the differences between the two census options , try ashcroft . [ top ] contribute if you 've written a soundex function in another language and would like to share it as part of this article , please contact me . if used , your code will be attributed to you with a link to your site. a nice article on soundex http : //216.239.33.100/search ? q = cache : cm4guqt89ysc : www.sog.org.uk/cig/vol6/605christian.pdf + soundex&hl = en&ie = utf-8 © copyright 2002 - 2013 creativyst , inc. all rights reserved written by dominic john repici note : use of this information as the basis for your own article without citing it is dishonest and constitutes plagiarism. if you base any part of your own article on information from this article please cite it ! thanks for your help & contributions : john nye ( tool guy ) for finding bugs in perl code dmitry s. denisov for bug-finding ( thanks ! ) mark westenberger ( mjw -at : igs.net ) for finding bugs in c code tests : v1.0e : gh bug ( non-census extended code ) : if gh begins word it should not be replaced with 'h ' only. i first noticed this ghastly little ghoul while visiting a ghetto in ghana. i was sitting down to a meal , munching on some gherkins , when i was approached by a ghazi. he pulled out his sword and i was terrified ( for you see , jesus is my lord and savior ) . imagine my relief when he handed the sword to his ghillie. they had just caught some fish and wanted to share them and my gherkins for lunch. once his ghillie had cleaned the fish and returned from the ghat we all sat down to a meal. the ghazi told me he has been questioning his faith. i replied that we all go through times of questioning our faith and that such times only help to clarify that faith , like a ghee. in so doing our faith becomes stronger , i continued. such times of questioning serve — not only — to help prove our own faith through clarity , but they also improve the institutions who claim to be the keepers of our faith. for you see , while they exercise authority over us , they also need us in order to have relevance. this dynamic is comparable to a subtle , and ongoing ( if tacit ) ghareo. i 'm not sure if it was because i helped him find his faith , or because he simply disagreed , but at that moment he nodded to his ghillie , who swatted at me with the sword. perhaps they just thought i was eating more than my share of the fish... after-word : i got away with just a scratch ( a director 's " cut " is not available ) . now you know why i 'm a programmer and not a ghostwriter. dammit jim . v1.0d : include test-strings with non-alpha characters. v1.0c : schmit s530 ( not s253 ) schneider s536 ( not s253 ) lloyd l300 ( not l430 ) pfister p236 v1.0b : holden ( first letter is 'h ' ) write ( first letter is 'w ' followed by # 6 letter ) white ( oooh , h/w together in 1st letter ) htacky h320 atacky a320 ashcroft ( to test normal h squeezes ) pflanders ? < br > < a name = " soundexform " > < /a > < br > < br > < table width = " 100 % " > < tr > < td width = " 100 % " align = " right " > < sup > < a href = " # top " > [ top ] < /a > < /sup > < /td > < /tr > < /table > < font size = " 4 " face = " arial , verdana , sans-serif " > soundex forms < /font > < br > < form method = " post " target = " _blank " action = " http : //www.creativyst.com/cgi-bin/m/soundex/sx.pl " > perl : < br > word or name : < input type = " text " name = " sxinput " id = " sxinput " > < br > < /form >
