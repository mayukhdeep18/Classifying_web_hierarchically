centralnotice string searching algorithm from wikipedia , the free encyclopedia jump to : navigation , search in computer science , string searching algorithms , sometimes called string matching algorithms , are an important class of string algorithms that try to find a place where one or several strings ( also called patterns ) are found within a larger string or text . let σ be an alphabet ( finite set ) . formally , both the pattern and searched text are vectors of elements of σ . the σ may be a usual human alphabet ( for example , the letters a through z in the latin alphabet ) . other applications may use binary alphabet ( σ = { 0,1 } ) or dna alphabet ( σ = { a,c,g,t } ) in bioinformatics . in practice , how the string is encoded can affect the feasible string search algorithms. in particular if a variable width encoding is in use then it is slow ( time proportional to n ) to find the nth character. this will significantly slow down many of the more advanced search algorithms. a possible solution is to search for the sequence of code units instead , but doing so may produce false matches unless the encoding is specifically designed to avoid it . contents 1 basic classification 1.1 single pattern algorithms 1.2 algorithms using a finite set of patterns 1.3 algorithms using an infinite number of patterns 2 other classification 2.1 na ï ve string search 2.2 finite state automaton based search 2.3 stubs 2.4 index methods 2.5 other variants 3 see also 4 academic conferences on text searching 5 references 6 external links basic classification [ edit ] the various algorithms can be classified by the number of patterns each uses . single pattern algorithms [ edit ] let m be the length of the pattern and let n be the length of the searchable text . algorithm preprocessing time matching time 1 na ï ve string search algorithm 0 ( no preprocessing ) θ ( ( n − m ) m ) rabin – karp string search algorithm θ ( m ) average θ ( n + m ) , worst θ ( ( n − m ) m ) finite-state automaton based search θ ( m | σ | ) θ ( n ) knuth – morris – pratt algorithm θ ( m ) θ ( n ) boyer – moore string search algorithm θ ( m + | σ | ) ω ( n/m ) , o ( nm ) bitap algorithm ( shift-or , shift-and , baeza – yates – gonnet ) θ ( m + | σ | ) o ( mn ) 1 asymptotic times are expressed using o , ω , and θ notation the boyer – moore string search algorithm has been the standard benchmark for the practical string search literature. [ 1 ] algorithms using a finite set of patterns [ edit ] aho – corasick string matching algorithm commentz-walter algorithm rabin – karp string search algorithm algorithms using an infinite number of patterns [ edit ] naturally , the patterns can not be enumerated in this case. they are represented usually by a regular grammar or regular expression . other classification [ edit ] this section does not cite any references or sources . please help improve this section by adding citations to reliable sources . unsourced material may be challenged and removed . ( july 2013 ) other classification approaches are possible. one of the most common uses preprocessing as main criteria . classes of string searching algorithms [ 2 ] text not preprocessed text preprocessed patterns not preprocessed elementary algorithms index methods patterns preprocessed constructed search engines signature methods na ï ve string search [ edit ] a simple but inefficient way to see where one string occurs inside another is to check each place it could be , one by one , to see if it 's there. so first we see if there 's a copy of the needle in the first character of the haystack ; if not , we look to see if there 's a copy of the needle starting at the second character of the haystack ; if not , we look starting at the third character , and so forth. in the normal case , we only have to look at one or two characters for each wrong position to see that it is a wrong position , so in the average case , this takes o ( n + m ) steps , where n is the length of the haystack and m is the length of the needle ; but in the worst case , searching for a string like " aaaab " in a string like " aaaaaaaaab " , it takes o ( nm ) finite state automaton based search [ edit ] in this approach , we avoid backtracking by constructing a deterministic finite automaton ( dfa ) that recognizes stored search string. these are expensive to construct — they are usually created using the powerset construction — but are very quick to use. for example , stubs [ edit ] knuth – morris – pratt computes a dfa that recognizes inputs with the string to search for as a suffix , boyer – moore starts searching from the end of the needle , so it can usually jump ahead a whole needle-length at each step. baeza – yates keeps track of whether the previous j characters were a prefix of the search string , and is therefore adaptable to fuzzy string searching . the bitap algorithm is an application of baeza – yates ' approach . index methods [ edit ] faster search algorithms are based on preprocessing of the text. after building a substring index , for example a suffix tree or suffix array , the occurrences of a pattern can be found quickly. as an example , a suffix tree can be built in time , and all occurrences of a pattern can be found in time under the assumption that the alphabet has a constant size and all inner nodes in the suffix tree knows what leafs are underneath them. the latter can be accomplished by running a dfs algorithm from the root of the suffix tree . other variants [ edit ] some search methods , for instance trigram search , are intended to find a " closeness " score between the search string and the text rather than a " match/non-match " . these are sometimes called " fuzzy " searches . see also [ edit ] sequence alignment pattern matching compressed pattern matching approximate string matching academic conferences on text searching [ edit ] combinatorial pattern matching ( cpm ) , a conference on combinatorial algorithms for strings , sequences , and trees . string processing and information retrieval ( spire ) , an annual symposium on string processing and information retrieval . prague stringology conference ( psc ) , an annual conference on algorithms on strings and sequences . competition on applied text searching ( cats ) , an annual series of evaluations of text searching algorithms . references [ edit ] ^ hume ; sunday ( 1991 ) . " fast string searching " . software : practice and experience 21 ( 11 ) : 1221 – 1248. doi : 10.1002/spe.4380211105 . ^ melichar , borivoj , jan holub , and j. polcar. text searching algorithms. volume i : forward string matching. vol. 1. 2 vols. , 2005. http : //stringology.org/athens/textsearchingalgorithms/ . r. s. boyer and j. s. moore , a fast string searching algorithm , carom. acm 20 , ( 10 ) , 262 – 272 ( 1977 ) . thomas h. cormen , charles e. leiserson , ronald l. rivest , and clifford stein . introduction to algorithms , second edition. mit press and mcgraw-hill , 2001. isbn 0-262-03293-7 . chapter 32 : string matching , pp.906 – 932 . external links [ edit ] huge ( maintained ) list of pattern matching links last updated : 12/27/2008 20 : 18 : 38 stringsearch – high-performance pattern matching algorithms in java – implementations of many string-matching-algorithms in java ( bndm , boyer-moore-horspool , boyer-moore-horspool-raita , shift-or ) exact string matching algorithms — animation in java , detailed description and c implementation of many algorithms . boyer-moore-raita-thomas ( pdf ) improved single and multiple approximate string matching kalign2 : high-performance multiple alignment of protein and nucleotide sequences allowing external features newpp limit report parsed by mw1058 cpu time usage : 0.484 seconds real time usage : 0.528 seconds preprocessor visited node count : 242/1000000 preprocessor generated node count : 807/1500000 post ‐ expand include size : 6470/2048000 bytes template argument size : 66/2048000 bytes highest expansion depth : 8/40 expensive parser function count : 2/500 lua time usage : 0.081/10.000 seconds lua memory usage : 1.27 mb/50 mb saved in parser cache with key enwiki : pcache : idhash : 28648-0 ! * ! 0 ! ! en ! 4 ! * ! math = 0 and timestamp 20140723012036 and revision id 618058846 retrieved from " http : //en.wikipedia.org/w/index.php ? title = string_searching_algorithm&oldid = 618058846 " categories : string matching algorithms hidden categories : articles needing additional references from july 2013 all articles needing additional references navigation menu personal tools create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikimedia shop interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page print/export create a book download as pdf printable version languages č e š tina deutsch espa ñ ol ف ا ر س ی fran ç ais bahasa indonesia italiano basa jawa 日 本 語 р у с с к и й с р п с к и / srpski srpskohrvatski / с р п с к о х р в а т с к и suomi t ü rk ç e у к р а ї н с ь к а 中 文 edit links this page was last modified on 23 july 2014 at 01 : 20 . text is available under the creative commons attribution-sharealike license ; additional terms may apply. by using this site , you agree to the terms of use and privacy policy . wikipedia ® is a registered trademark of the wikimedia foundation , inc. , a non-profit organization . privacy policy about wikipedia disclaimers contact wikipedia developers mobile view
