compression via arithmetic coding in java. version 1.1 apache/bsd licensing the arithmetic coding package is licensed under the standard apache/bsd license . changes in version 1.1 exclusion statistics for more accurate estimation . many source code optimizations , primarily at a fairly low level of detail . overview this directory contains the distribution for a package to do compression via arithmetic coding in java. a very brief description of arithmetic coding with lots of pointers to other material can be found in : the arithmetic coding tutorial the arithmetic coding package contains a generic arithemtic coder and decoder , along with byte stream models that are subclasses of java 's i/o streams. example statistical models include a uniform distribution , simple unigram model , and a parametric prediction by partial matching ( ppm ) model. other models can be built in the framework in the same way as the examples. a prebuilt set of javadoc is available online : javadoc for com.colloquial.arithcode quick start for java pros download the source to target directory , cd there , unjar the source , run ant test . downloading com.colloquial.arithcode the distribution comes in three parts : source distribution jar javadoc jar precompiled class files jar using com.colloquial.arithcode the precompiled class files may be used directly from jar by putting the filename of the jar in the classpath , either in the environment or in the argument to the jvm . i attempted to structure the package according to the recommendations in sun 's requirements for writing java api specifications and in the book effective java by joshua block . unpacking the documentation the documentation may be unpacked into a directory by executing the following sequence of commands , where $ target_dir is the target directory into which the documentation is to be unpacked . mv colloquial_arithcode_doc-1_1.jar $ target_dir cd $ target_dir jar xvf colloquial_arithcode_doc-1_1.jar the documentation was intended to follow the recommendations laid out in sun 's how to write doc comments . i also used sun 's doc check utilities for checking completeness of doc and linking errors. but they only work with the 1.2 and 1.3 java 2 sdks . building from the source the source may be unpacked in exactly the same way as the documentation : mv colloquial_arithcode_src-1_1.jar $ target_dir cd $ target_dir jar xvf colloquial_arithcode_src-1_1.jar the source has been tested with the 1.3 and 1.4 java 2 sdk compilers . the code may be compiled directly. it is packaged in the appropriate directory structure. but i prefer to use apache ant ; it 's like makefiles , only in xml and comprehensible ( i know that sounds like an oxymoron several times over. ) . ant can be downloaded as part of the java web services developer pack . i followed the directory structure suggested by the useful but strangely named article using ant in anger . after unpacking the jar file and installing ant , the package and documentation may be built from the command line and tests may be run . for ant builds , there is a file conventionally named build.xml which contains the build instructions. here is the command to test that everything 's working , where $ target_dir is where the source was unpacked. : cd $ target_dir ant test there are no environment variable dependencies in the build.xml. use ant -projecthelp to examine the other targets , or look at the source . tools for performance tuning i ran everything first through java -xprof , which is just the sun java runtime with profiling for windows. it actually caught all the glaring inefficiencies , but to double-check , i ran it through rational quantify for windows . quantify is great ; i use it at work. get it if you can afford it . it 's worth it if you need the speed. the implementations used here do n't have any glaring inefficiencies ; the algorithms on the other hand ... any suggestions for improvements or if you want to point out a glaring efficiency , i 'd be glad to hear about it . performance note for best performance , run java with the -server option. you can find a lot of information in the java hotspot white paper , which contains a description of the java hotspot server compiler . the server option provides a lot of optimizations compiler provides extensive in-lining of one-line functions and other code unfolding and folding based on runtime analysis of hotspots. the compressors and decompressors run around 10-50 % faster in this mode. for more discussion of this compiler and tuning java in general , see java performance tuning by jack shirazi . compression rates and speed version 1.0 results : 6 october 2002 version 1.1 results : 26 january 2003 copyright 2002-2003. bob carpenter. maintained by bob carpenter , carp @ colloquial.com .
