university of virginia , department of computer science cs655 : programming languages , spring 2001 how do we tell truths that might hurt ? edsger w.dijkstra , 18 june 1975 from http : //www.cbi.umn.edu/inv/burros/ewd498.htm sometimes we discover unpleasant truths. whenever we do so , we are in difficulties : suppressing them is scientifically dishonest , so we must tell them , but telling them , however , will fire back on us. if the truths are sufficiently impalatable , our audience is psychically incapable of accepting them and we will be written off as totally unrealistic , hopelessly idealistic , dangerously revolutionary , foolishly gullible or what have you. ( besides that , telling such truths is a sure way of making oneself unpopular in many circles , and , as such , it is an act that , in general , is not without personal risks. vide galileo galilei..... ) computing science seems to suffer severely from this conflict. on the whole , it remains silent and tries to escape this conflict by shifting its attention. ( for instance : with respect to cobol you can really do only one of two things : fight the disease or pretend that it does not exist. most computer science departments have opted for the latter easy way out. ) but , brethern , i ask you : is this honest ? is not our prolonged silence fretting away computing science 's intellectual integrity ? are we decent by remaining silent ? if not , how do we speak up ? to give you some idea of the scope of the problem i have listed a number of such truths. ( nearly all computing scientists i know well will agree without hesitation to nearly all of them. yet we allow the world to behave as if we did not know them.... ) programming is one of the most difficult branches of applied mathematics ; the poorer mathematicians had better remain pure mathematicians . the easiest machine applications are the technical/scientific computations . the tools we use have a profound ( and devious ! ) influence on our thinking habits , and , therefore , on our thinking abilities . fortran -- " the infantile disorder " -- , by now nearly 20 years old , is hopelessly inadequate for whatever computer application you have in mind today : it is now too clumsy , too risky , and too expensive to use . pl/i -- " the fatal disease " -- belongs more to the problem set than to the solution set . it is practically impossible to teach good programming to students that have had a prior exposure to basic : as potential programmers they are mentally mutilated beyond hope of regeneration . the use of cobol cripples the mind ; its teaching should , therefore , be regarded as a criminal offence . apl is a mistake , carried through to perfection. it is the language of the future for the programming techniques of the past : it creates a new generation of coding bums . the problems of business administration in general and data base management in particular are much too difficult for people that think in ibmerese , compounded with sloppy english . about the use of language : it is impossible to sharpen a pencil with a blunt axe. it is equally vain to try to do it with ten blunt axes instead . besides a mathematical inclination , an exceptionally good mastery of one 's native tongue is the most vital asset of a competent programmer . many companies that have made themselves dependent on ibm-equipment ( and in doing so have sold their soul to the devil ) will collapse under the sheer weight of the unmastered complexity of their data processing systems . simplicity is prerequisite for reliability. [ handwritten annotation ] we can found no scientific discipline , nor a hearty profession on the technical mistakes of the department of defense and , mainly , one computer manufacturer . the use of anthropomorphic terminology when dealing with computing systems is a symptom of professional immaturity . by claiming that they can contribute to software engineering , the soft scientists make themselves even more ridiculous. ( not less dangerous , alas ! ) in spite of its name , software engineering requires ( cruelly ) hard science for its support . in the good old days physicists repeated each other 's experiments , just to be sure. today they stick to fortran , so that they can share each other 's programs , bugs included . projects promoting programming in " natural language " are intrinsically doomed to fail . is n't this list enough to make us uncomfortable ? what are we going to do ? return to the order of the day , presumably...... . 18th june 1975 prof.dr.edsger w.dijkstra plataanstraat 5 burroughs research fellow nuenen - 4565 the netherlands ps. if the conjecture " you would rather that i had not disturbed you by sending you this. " is correct , you may add it to the list of uncomfortable truths . university of virginia cs 655 : programming languages cs655-staff @ cs.virginia.edu hhmts start last modified : mon feb 26 15 : 05 : 50 2001 hhmts end
