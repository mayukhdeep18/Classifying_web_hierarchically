welcome to os/380 - the family of freely-available 31-bit mainframe operating systems which currently includes mvs/380 , vm/380 and vse/380 click here to get the free mvs/380 software now = = = > mvs/380 if you have an mvs application that uses a large amount of memory ( e.g. the mvs version of gcc needs about 20 mb of memory for data on top of the 3 mb for the executable itself when compiling large programs such as itself ) , then you will require a 31-bit version of mvs that allows more than 16 mb ( 24-bit ) of memory to be addressed. unfortunately the last freely-available version of mvs ( mvs 3.8j in 1981 ) , only did 24-bit addressing. the first 31-bit version was mvs/xa which was released in 1983 and copyrighted. however , with a modification to the standard hercules emulator , it was possible to create a new product ( note - this new product is not supported , controlled or in any way endorsed by the official hercules development team ) , called hercules/380 , to support a new architecture , called s/380 , which in turn allowed modifications to standard ibm mvs 3.8j , to create a new operating system ( note - this new operating system is not supported , controlled or in any way endorsed by ibm ) , called mvs/380. this new operating system allows ( some ) 31-bit z/os ( what mvs is now marketed as ) modules to execute on the ( still mostly ) 24-bit operating system. those " some " applications include gcc and pretty much any standard c program compiled with pdpclib with the appropriate options. obviously anything you can do in c you can do in assembler too , so assembler programs can make use of this technique , but most existing assembler programs would not do that. note that actual binary compatibility is provided , such that you can pick up a z/os load module ( so long as it only used the subset of z/os services documented in the mvs/380 principles of operation ) and xmit or unload it , completely unchanged , to mvs/380 for execution. most credit for this goes to gerhard postpischil. vm/380 was also added to the os/380 family thanks mainly to robert o'hara. hercules/380 , mvs/380 and vm/380 are all available via sourceforge , in the " files " link. it is very important that you read the readme.s380 inside the hercules/380 distribution. especially linux users. there is also a readme.txt in mvs/380 and a vm380readme.txt in vm/380. most people who try to guess their way past the readme files seem to have difficulty. ymmv. the readme files are usually updated whenever someone goes wrong after having followed them , so please report any negative experiences so that they can be improved. mvs/380 is not distributed as a standalone product , but instead provides a framework. it currently makes use of turnkey-mvs ( a distribution of mvs 3.8j from volker bandke and others ) . it also relies on a theoretically independent party ( possibly yourself ) to provide the equivalent of a cbipo , in the form of shadow files. example build scripts are provided so that you can download the products ( such as gcc ) and build the required shadows. click here for one such " cbipo " . vm/380 is also distributed as shadow files. the base used for 1.1 is the vm/370 sixpack . vse/380 is simply the standard dos/vs 5-pack when used in conjunction with hercules/380 with the " ostailor vse " configuration option enabled. see dos/vs for more discussion. music/sp allows 31-bit programs too , and the flagship gcc has been successfully ported to that environment , although it is still in beta status. all source code is available , but it is generally spread over a large number of areas ( since it comes from different places ) . some of those places are mvs/380 gccmvs pdpclib bwbasic brexx fsf being a volunteer project , it is fairly unpredictable where the next advance is going to come from. but this is without doubt a living and fascinating ( if sometimes controversial ! ) project and anyone is welcome to join in regardless of skill level. some things do not require programming skills such as installing products or releasing a new version or updating documentation or testing. even the programming has a wide variety from system level to utilities to applications. one interesting area is bringing the assembler source code up-to-date by running disassemblies and doing intelligent matching. discussion of the 380 environment takes place here . technical documentation and history for os/380 can be found here . and the slides from a share presentation by jay maynard can be found here for another view of the technology ( it describes an older version though , so only use it as a rough guide ) . e-mail ( via challenge ) paul edwards here .
