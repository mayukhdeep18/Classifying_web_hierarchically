retro computing : bbc micro goldmine introdution this page is dedicated to the bbc microcomputer , a home computer dating from the early 1980 's , on which the foundations of my computer-knowledge were built. also to all those who wrote the extremely helpful books and magazines at that time , particularly to the contributers of " micro user " magazine. what you may not know is that there are some great bbc emulators around , which let you run all your favorite bbc programs and games from the comfort of your ibm pc. i strongly recommend pcbbc ( or at the ? newer ? , but less pretty site at pcbbc ) , written by stuart mcconnachie of nottingham. see also the bbc lives website for lots of links to beeb-related stuff. backup and file transfer odds are that if you 've got a bbc computer , you have a pile of 5.25 " floppy disks which are taking up space , and gradually decomposing. probably the best way of preserving that data for the future is to copy the disks to your pc while you can ( assuming you still have an operational bbc micro to hand ) . the pcbbc emulator -- and most of the others apparently -- require a " disk image " file : this is just one big pc file which contains literally all the data from a bbc floppy disk. this kind of file preserves all the load , run , and execute addresses of files ( which many applications require ) , and can faithfully reproduce the extra information used by many special disk formats used by games for anti-piracy measures. although i have included details of a minimal file-transfer system below , there are probably better ones elsewhere on the net. bbc-disk-image-on-pc to native pc filesystem transfer my main contribution to the bbc-on-pc field at present is a windows 95/98/nt based " bbc disk-image content extractor " - a program to extract individual files from those ubiquitous bbc-disk-images to your pc filesystem. the program works with both dfs and adfs disk images. when i get time , i should enable it to de-tokenise basic programs , and display bbc screen dumps and amx art pictures. in the mean time , if you need listings of bbc basic programs as pc text files , you should run an emulator such as pcbbc , load the file you want to list , type * spool txtfile , list , * spool -this will write a text listing to the bbc disk-image , which you can then extract using my program. downloads download the bbc disk-content extractor : bbcdisk.exe ( 268kb ) [ win95/98/nt only ] . as always , by downloading software from my website , you consent to my disclaimer ( see elsewhere on my site ) - basically that all programs are supplied in good faith , but that you accept the full risk : i am liable for nothing in the event that anything goes amiss . bbc-to-pc disk transfer if you 've got this far , you are probably familiar with the bbc microcomputer ! as i mentioned before , there are probably better systems elsewhere on the net. however , if you have the programmer mentality ( as most beeb affictionados do ) , the material here should be enough to get you started. what you need access to a working bbc computer and disk drive a short program on your trusty beeb to send the data a serial cable to connect your bbc to your pc a short program on your pc to receive the data to a file a bbc emulator and/or a program to read individual files off your disk images and into the regular pc filesystem bbc " send " programs type the program ( s ) into your bbc micro , and save to its disk ( if you have any left ) . for standard bbc b dfs-format disks 10 rem program to transfer images ( of dfs ) bbc computer disks to a pc 20 rem via the serial port , for archival storage. 30 rem ( c ) w.a.steer 1998 40 rem 50 * key0 oscli " fx8,8 " : oscli " fx7,8 " : oscli " fx3,1 " : oscli " fx181,0 " : oscli " fx2,1 " | m 60 addr = &70 70 check = &74 80 dim d % 10240 90 procassem 100 mode7 110 * fx21,0 120 procinitdiscs 130 proclm 140 proccopy 150 goto100 160 end 170 : 180 defprocinitdiscs 190 input' ' " dfs source drive : " so % 200 : 210 print' ' " please put source disc into drive " ; so % 220 print " and press any key " ; : a = get : print 230 a % = &7e : x % = &70 : y % = &09 : call&fff1 240 ? &973 = 0 250 tr % = ! &970 div 2560 260 endproc 270 : 280 defproclm 290 print' ' " ensure drive is set to " ; 300 if tr % = 40 then print " 40 " ; else print " 80 " ; 310 print " tracks. " 320 vdu28,0,24,39,10 330 print' ' " now start pc going , and press a key " ; 340 a = get : print 350 endproc 360 : 370 defproccopy 380 * fx7,8 390 * fx8,8 400 ! check = 0 : rem initialise checksum 410 for t % = 0 to tr % -1 420 procaccess ( t % ,so % ,&57,d % ) 460 print " sending track " ; t % ; 470 * fx3,7 480 ! addr = d % 490 call send 500 * fx3 501 print " " ; ~ ! check 510 next 520 print " disc transferred. " 530 print " check : " ; ~ ( ( ! check ) and &ffff ) 540 print ' " press any key " ; : a = get 550 endproc 560 : 570 defprocassem 580 for t % = 0 to 3 step 3 590 p % = &c00 600 [ opt t % 610 .send 620 sei 630 ldx # &0a \ send 2560 bytes ( &0a00 ) 640 ldy # 0 650 .loop 660 lda ( addr ) ,y 670 jsr &ffee 680 clc : adc check : sta check : lda # 0 : adc check + 1 : sta check + 1 690 iny 700 bne loop 710 inc addr + 1 720 dex 730 bne loop 740 cli 750 rts 760 ] 770 next 780 endproc 790 : 800 defprocaccess ( t % ,dr % ,rw % ,ad % ) 810 ? &970 = dr % 820 ? &971 = ad % mod 256 830 ? &972 = ad % div 256 840 ? &973 = &ff 850 ? &974 = &ff 860 ? &975 = 3 870 ? &976 = rw % 880 ? &977 = t % 890 ? &978 = 0 900 ? &979 = &2a : rem 10sectors ( 1 trk ) 910 a % = &7f : x % = &70 : y % = &09 : call&fff1 920 endproc for adfs format disks ( mainly seen on the bbc master series ) 10 rem program to transfer images ( of adfs ) bbc computer disks to a pc 20 rem via the serial port , for archival storage. 30 rem ( c ) w.a.steer 1997 40 rem 50 * key0 oscli " fx8,8 " : oscli " fx7,8 " : oscli " fx3,1 " : oscli " fx181,0 " : oscli " fx2,1 " | m 60 addr = &70 70 check = &74 80 dim d % 16384 90 * dir : 0 100 procassem 110 mode7 120 * fx21,0 130 procinitdiscs 140 proclm 150 proccopy 160 goto110 170 end 180 : 190 defprocinitdiscs 200 input' ' " source drive : " so % 210 : 220 print' ' " please put source disc into drive " ; so % 230 print " and press any key " ; : a = get : print 240 procaccess ( 0,1,so % ,&08 , d % ) 250 tr % = ( ( d % ! &fc and &ffffff ) div 16 ) 260 endproc 270 : 280 defproclm 290 print' ' " ensure drive is set to " ; 300 if tr % = 40 then print " 40 " ; else print " 80 " ; 310 print " tracks. " 320 vdu28,0,24,39,10 330 print' ' " now start pc going , and press a key " ; 340 a = get : print 350 endproc 360 : 370 defproccopy 380 * fx7,8 390 * fx8,8 400 ! check = 0 : rem initialise checksum 410 for t % = 0 to tr % -1 step 4 420 procaccess ( t % ,64,so % ,&08,d % ) 430 print " sending track " ; t % ; 440 * fx3,7 450 ! addr = d % 460 call send 470 * fx3 475 print " " ; ~ ! check 480 next 490 print " disc transferred. " 500 print " check : " ; ~ ( ( ! check ) and &ffff ) 510 print ' " press any key " ; : a = get 520 endproc 530 : 540 defprocaccess ( t % ,ns % ,dr % ,rw % ,ad % ) 550 s % = t % * 16 560 dim b % 32 570 b % ? 0 = 0 580 b % ! 1 = ad % 590 b % ? 5 = rw % 600 b % ? 6 = ( s % div 65536 ) + ( dr % * 32 ) 610 b % ? 7 = ( s % mod 65536 ) div 256 620 b % ? 8 = s % mod 256 630 b % ? 9 = ns % 640 b % ? 10 = 0 650 b % ! 11 = 0 660 a % = &72 670 x % = b % mod 256 : y % = b % div 256 : call&fff1 680 if ? b % 0 then print " error " ; ? b % 690 endproc 700 : 710 defprocassem 720 for t % = 0 to 3 step 3 730 p % = &c00 740 [ opt t % 750 .send 760 sei 770 ldx # 64 780 ldy # 0 790 .loop 800 lda ( addr ) ,y 810 jsr &ffee 820 clc : adc check : sta check : lda # 0 : adc check + 1 : sta check + 1 830 iny 840 bne loop 850 inc addr + 1 860 dex 870 bne loop 880 cli 890 rts 900 ] 910 next 920 endproc explanation of programs line 80 , dim d % .... reserves space for a one-track buffer. procassem assembles the machine-code routines for sending the data ( m/c for speed ) . procinitdiscs reads the first track of the disk and determines the disc size. in the case of special acorn/superior " dual format " 40/80-track disks , you might have to temporarily insert a line 255 which reads 255 tr % = 40 to force 40-track behaviour. proclm prompts the user to set the drive switch to 40/80 tracks , as appropriate. proccopy steps through the tracks , calling procaccess to read the track , then calls the machine code to send it down the serial lead to the pc.. procaccess sets up a parameter-block , then calls a file-system osword ( &fff1 ) routine to read a disk-track into the memory reserved by d % . the machine-code routine " send " simply steps through the memory , " printing " each byte to the default output stream ( the * fx3,7 makes rs423 default ) via a call to &ffee ( oswrch - operating system write character - for those who 've forgotten ! ) . pc " receive " program this is especially primitive , but just about does the job ! download this program and save to disk bbcbkup.exe . it is a text-mode program which runs under windows 3.1 or later. for those of you not using com1 and 80-track dfs disks , or who have time to do a better job , the c + + source code ( requires windows libraries ) is available : getbbcd4.cpp . when you run it , you need to enter the full path and name where you want to store the disk image. [ eg c : \ bbcdisks \ disk1.img ] please only use 8-letter directory and filenames - the program was written for 16-bit windows ! note that the pcbbc emulator expects adfs disk images to have the extension " .adf " and dfs ones " .img " . when the file has transferred , a checksum figure is displayed on both machines. it is up to you to see that these tally. if they do n't , your only option is to re-send the disk until it does. failing all that , the full version ( Å‚ 10 ) of pcbbc incorporates some file-transfer programs -- which i have n't tried myself. rs232/423 cable details to follow. you ought to put resistive droppers in the cable on the signal lines driven by your pc. this prevents possible damage to your trusty beeb , and may be required in order for the transfer to work anyway ! last modified : 5 december 1999 source : http : //www.ucl.ac.uk/ ~ ucapwas/bbc/ Â© william andrew steer email : w.steer @ ucl.ac.uk
