defying graffiti : the making of gnuton motivation | software | hardware | status | screenshots | download | contacts = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = motivation the motivations for this work are varied. initially , the goal was to have an emulator as part of a free development environment. even after newton , inc released the toolset , an emulator would be useful as a low-cost means of development , as a testing environment , to enable lower-level debugging , etc . of course , the greater scheme was always a freeware pda . however , it was not until apple dropped development of the newton ( just as it was reaching a widely useful state ) , that this became a pressing need . for the future , i 'd hope that having a system where the hardware is both off the shelf and not restricted to a single processor and form-factor , and the software is freely available , will enable a growth a the platform not seen under apple. smaller systems , larger systems , java vm extensions , c programming api , multi-threaded newtonscript , novel ui concepts -- all are possible . in the short term : i want something to replace my messagepad when it 's time to upgrade. the goal is to get newton os 2.1 , subject to suitable hardware , running as a free system . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = software current work is on four fronts : virtual machine progressing , but really waiting for the package loader to have some code to execute. all these easy instructions are done , and the more complex are awaiting some heavy bytecode disassembly to see what the real semantics are . this is based on two documents , the first now largely redundant since apple released the bytecode and virtual machine specifications . i 've heard rumours ( well , walter smith said it , so it 's fairly substantiated ; - ) that there were changes/extensions to the vm for os 2.x. we 'll need documentation for these at some point , so if you know anything , do n't hesitate to share .. . package loader decoding the package format and creating the application in the emulator memory. again , this is derived from the apple-published specifications released by newton inc . loading the package requires the packages soup .. . the decoder for the package format is mostly done , except for pointers which are not being added to a pointer table , and looked up if they have already been decoded. once this is done , we 'll be loading packages . i just need to figure out exactly what suckpackagefrombinary does now ( time to write a little app for the mp2k ) so i can reimplement it properly ( along with freezing , thawing and package removal ) . anyone got any clues ? stores and soups on the messagepad , the limitations of memory require that stores put a lot of effort into compressing things , and then paging them into dynamic ram during use. for the moment , i 'm not worrying about this. all we need for now is working storage . the current boot process is identifying devices configured that are possible store hosts , and probing for formatted stores. unformatted devices ( like a new file ) are queued for a notification once the event loop is up and running. if you give the ok , then the stores are mounted . some work is still needed on the actual store implementation , but it 's downhill from here . view system support for the primitive view classes , creation of the system messages and redevelopment of the standard protos . because i think that the biggest difference between the possible host hardware is the displays , what i plan to do is implement both the drawing primitives , and the c-level views in the display drivers. that way , we can have a tk driver , an mfc driver , a linux svgalib driver , etc . otherwise , the view system consists of the event loop to handle newtonscript message sending. gnutos will support both python and newtonscript objects , with some chance for other formats ( c objects compiled for various processors ) later on . the big item missing here is obviously the handwriting recognition. i 'm not intending to do this , but i hope that one or another of the hwr research projects around the place can cough up something that will plug in satisfactorily . the initial goal is to get a minimal " hello world " package to load an execute , using only the protoapp and prototextbutton protos. this will demonstrate the basic functionality and requires the ability to load and activate packages. not happening yet .. . all the current code is written in python to speed development. the vm is the first candidate for a rewrite in c , probably followed by the view system . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = hardware hardware is an issue : we need to use something that is freely available , an open architecture , and preferably better than the messagepad 2100 ; - ) now that i 've stopped dreaming ( sorry ) the actual plans are to use something supporting a minimal linux kernel , with just the essential drivers ( video , digitiser , serial , ethernet , ... ? ) . why linux ? because it is free , widely ported , quite small and i like it ; - ) potential hosts are varied , but include x86 , 68k , mips and arm boxes from a variety of vendors. some that i have been considering are : handhelds site for various unix flavours running on handhelds , with an emphasis on compaq 's very nice ipaq ( derived from the itsy below ) and samsung 's yopy . linux ce check these guys out -- they 're making great progress on porting the linux kernel to a variety of ce-based handhelds. both mips and sh3/4-based devices are booting the basic kernel and entering a reduced userland environment . uclinux and the ucsimm this is a standard 30pin simm module , with what is essentially the guts of a palm pilot on it. ie. a motorola dragonball processor , 2m flash , 8m dram , onboard ethernet , serial , etc . they have a reduced linux kernel running , with enough space to run a fair amount of code. do n't know if we 'll fit everything on there yet , but there 's always the option of more flash ( ie. 4m on-board , or a secondary card . i 've ordered one of these. i have plans to hack one of my old omps , rip out the current motherboard and slot this in . i will need a second board to drive the digitiser , interface to the ir , do some power management , etc , but ... even if it just runs off the wall power , it 'd be kinda cute ; - ) pleb they guys are doing great stuff , building an open-hardware pda platform using the strongarm. if this comes off ( ie. i can get one ) , this is my dream target . toshiba libretto a real pc , fits on your palm. the newer ( read , more expensive ) models even last something like 3 or 4 hours on a battery charge. doh ! still ... my boss had one he got sick of , so it 's sitting on my desk now ; - ) this is my current working system : libretto 100ct 64m ram 2gb hdd 800x480 lcd linux 2.2 and glibc 2.0 system ( debian 2.1 base ) ggi graphics libraries , talking to the vesa framebuffer , currently at 640x480 apm power management , with very limited configuration . i 'm getting about 4 hours battery life for the moment . wince 2.0 devices philips nino , nec mobilepro , everex , casio a10 , .. . the good thing about these is that they are plentiful , relatively cheap ( compared to the rugged wintel handhelds ) , and there 's now an early port of python available ! casio pa-2400 about the same size as the messagepad , no keyboard , runs wince ( too bad if you 're left handed though ) i kinda like the idea of this one -- it 's almost like having a messagepad again. does anyone know if you can get a clean screen in wince 2.0 ? like , no start bar , window titles , etc ? perhaps a games mode ? ( i know it can be done , but i 'm not sure there 's a way an application can switch it ) . then again , i talked to the people at eworld in sydney , and they said that the hardware is pretty poor quality , especially when compared to the mp2k series. hmmm . psion series 5 has a linux port . of course it has a keyboard too ... : - ( digital 's itsy now this is looking better -- back to the strongarm , and the same size as the pilot ! and it already runs linux too ! hmmm .. . initial development was on a 486dx100 with 8m ram , vga and a wacom penpartner digitiser tablet all running under linux and svgalib. current work is focussed on a toshiba libretto 100ct , and a vadem clio running a very early linux port ! = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = screen shots there 's not much to see yet , but ... just to whet your appetite , here 's a look at the current screen , and the boot log messages as well . when it boots , it checks for available store devices. in this case , the config file specifies that a disc file be made available , but since it does n't exist , the gnuton asks whether you 'd like to initialise it as a store ( much as if you 'd put a blank pc card into a messagepad ) . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = download warning .. . this does not work ! that is , while it should run , it does n't do anything yet. it 's a snapshot of the code which you 're welcome to look at , and more welcome to fix problems with , but it wo n't actually do anything. you have been warned ! prerequisites for running this snapshot are unix ( i 've used linux 2.x , solaris 2.x and digital unix 4.0 ) tcl/tk 8.x sleepycat 's berkeley db ( version 1.8x , or later with 1.8x compatibility built in ) python 1.5 ( or later ) , with tkinter and bsddb ( and on linux probably not thread ) modules windows 95/nt ( thanks to jack skoda for testing this ) python 1.5 or later , with tkinter ( included ) and bsddb ( included ) macos ( no one has tested this yet -- please let me know ! ) tcl/tk 8.x python 1.5 or later it 's being developed on my linux box , and i sometimes test it on solaris and digital unix at work. jack skoda ( thanks jack ! ) reports that it works fine on win nt . i 'd like to get it running on the mac as well ( since i suspect a lot of newton people have macs ) , so if you have a macintosh and succeed in getting it going , please let me know. i suspect that bsddb will be a problem -- if you get the rest going , send me some mail and i 'll try to come up with an alternative . download the current ( or previous ) versions : gnuton-0.1.7 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = contacts for further information , and particularly if you 're interested in helping the development , send davida @ pobox.com some mail . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = $ id : index.html,v 1.15 2000/09/25 13 : 27 : 44 arnold exp $ web space generously donated by
