fnn : flat neighborhood networks welcome to the home of fnn documents and software ! since the press releases on our clusters klat2 and kasy0 , which have flat neighborhood networks , many of you have been asking us for more information , access to the ga ( genetic search algorithm ) we developed to design fnns , etc . this is where everything will be posted... . what is a fnn ? a fnn is a network that guarantees single-switch latency and full link bandwidth per pe ( processing element ) pair on a wide variety of parallel communication patterns. it does so using a flat topology of pes connected to switches , where each switch forms a neighborhood of tightly coupled pes. the switches are nominally connected only to pes and not to each other. they key is that each pe in a fnn is connected to several switches , and is thus a member of several neighborhoods. the overall effect is that pe pairs can communicate with single switch latency and full link bandwidth across the entire machine , even though each individual neighborhood does not encompass the entire machine . there are two classes of fnns based on which pairs of pes have guaranteed latency and bandwidth : universal fnns guarantee the latency and bandwidth for all pe pairs . sparse fnns guarantee the latency and bandwidth for pe pairs involved in selected communication patterns . publications on fnns publications on sparse fnns ( sfnn ) have their own page . the following publications discuss what we now call universal fnns : h. g. dietz and t.i.mattox , inside the klat2 supercomputer : the flat neighborhood network &amp ; 3dnow ! , ars technica , june 22 , 2000 . h. g. dietz and t.i.mattox , " compiler techniques for flat neighborhood networks , " 13th international workshop on languages and compilers for parallel computing 2000 ( lcpc00 ) , ibm t.j. watson research center , yorktown heights , new york , usa , august 11 , 2000 . preprints are available as ps and pdf versions for personal use only . thomas hauser , timothy i. mattox , raymond p. lebeau , henry g . dietz and p. george huang , " high-cost cfd on a low-cost cluster , " gordon bell price/performance finalist and regular paper in sc2000 , dallas , texas , usa , november 4-10 , 2000. preprints are available as 13mb ps and 31mb pdf versions for personal use only. ( there also is a 4mb pdf version that some pdf viewers do n't like. ) h. g. dietz and t.i.mattox , " klat2 's flat neighborhood network , " to appear in the proceedings of the extreme linux track of the 4th annual linux showcase ( als2000 ) , atlanta , ga , usa , october 12 , 2000 . preprints are available as 7.4mb ps and 2.3mb pdf versions for personal use only . to create your own universal fnn designs the following form can be used to submit design parameters to a simplified version of the fnn design ga ( genetic search algorithm ) that uses a cgi interface. this cgi is a somewhat improved version of our original fnn design cgi ; it creates universal fnn designs very quickly , so it 's easy to play with different parameters. we hope to be posting software tools for sparse fnn design in the near future... . fill-in this form with the design parameters you desire . specifying 0 for any one of the parameters will cause the corresponding value to be automatically set to the limit ( largest or smallest ) value for which a design can be found . the cluster will have pcs . not counting uplink ports , there are ports available on each switch . the maximum number of nics that can be placed in each pc is . in case you are wondering where the 96 , 48 , 3 parameters came from , they are the parameters that generate the network design used in bunyip , from the australian national university , canberra . although our klat2 was clearly the first machine designed to use a fnn , our australian friends just happened to build a network that is a universal fnn at about the same time the we built ours. thanks to our ga , klat2 's network design offers substantially higher bandwidths at a lower cost ( e.g. , bunyip 's bisection bandwidth could be much higher -- try 96 , 32 , 4 ) , but both machines clearly demonstrate the superior price/performance of fnns. incidentally , the bunyip folks also are using swar technology ; but they are hand-coding sse while we 've been using a variety of tools with 3dnow ! . small world , eh ? if you 're just looking for a brief overview of the universal fnn technology , read on. there is a separate page for the sparse fnn technology . does the world need yet another network topology ? one would think ( well , we did ; - ) that the latest round of gb/s network hardware would have made the design of a high-bandwidth cluster network a trivial exercise. however , that is n't the case when the prices are considered : when we invented fnns in 2000 , the cheapest of the gb/s nics available were pci ethernet cards priced under $ 300 each ; now they are $ 50- $ 100. prices have continued to drop. prices on custom high-performance nics ( e.g. , myrinet ) start at close to $ 1000 and have not been going down . in late 2002 , 48-port 100mb/s fast ethernet switches have dropped to less than $ 25/port. gigabit ethernet switches are starting to follow the same trend , with $ 100/port pricing in sight for switches up to about 48 ports. wider switches with the needed performance are unlikely to become cheap in the near future. thus , it would be necessary to build a hierarchical switch fabric using multiple layers of switches , yielding higher cost , higher latency , and significantly lower bisection bandwidth ( unless you use a " fat tree " or other scheme , which adds still more expense -- especially because cheap layer 2 ethernet switches do n't support those topologies ) . in summary , the cost of the " obvious " gb/s network for klat2 's 66 single-processor nodes was over 30 times the cost of the network we built for klat2. in fact , to match klat2 's bisection bandwidth , a network built using gb/s hardware would have cost even more. gigabit ethernet is getting cheaper , but obvious topologies just are not competitive with fnn performance. so , if you 've got tons of money that you have to spend immediately , you can impress your friends by buying expensive custom network hardware that can use an obvious topology and still be competitive with fnn performance . otherwise , read on.... ; - ) the flat neighborhood concept when no solution seems to work , it is time to rephrase the problem. we wanted to have the minimum possible latency between any pair of pcs. clearly , for klat2 's 66 nodes , you could n't put 65 nics in each machine to implement a direct connection.. . the next best thing would be to have just one switch delay between any two pcs. the problem then becomes that a 66-way switch that can handle communication at full wire-speed is not cheap . in fall 2002 , you can buy a wire-speed 48-way 100mb/s switch for about $ 800. when klat2 was built , it was $ 500 for 32 ports. if we ignore klat2 's two " hot spare " processors , we could use 32 dual-processor pcs and channel bonding of multiple nics ( http : //www.beowulf.org/ ) . however , most dual-processor pcs have memory bandwidth problems and , even if we wanted to adopt that solution , dual-athlon pcs are not yet widely available . the " flat neighborhood " network topology came from the realization that it was sufficient to share at least one switch with each pc -- all pcs do not have to share the same switch . a switch defines a local network neighborhood , or subnet. if a pc has several nics , it can belong to several neighborhoods. for two pcs to communicate directly , they simply use nics that are in a neighborhood that the two pcs have in common. coincidentally , this flat , interleaved , arrangement of the switches results in spectacular bisection bandwidth -- approaching the same bisection bandwidth that we would have gotten if we had wire-speed switches that were wide enough to span the entire cluster ! we even get the benefit that , because four nics are available for simultaneous use in each pc , we bypass some of the i/o serialization that using ip would imply with a single gb/s nic ( or channel-bonded set of nics ) under linux . a ludicrously simple example the above example shows how one could construct a fnn for 6 pcs using just two nics/pc and three 4-port switches. note that every pc has at least one single-switch-latency path to every other pc ; some pc pairs have more than one such path . no free lunch unfortunately , flat neighborhood networks introduce several interesting new problems. these problems are : how to design a flat neighborhood network. unfortunately , only very small fnn wiring patterns can be designed by hand. we created a genetic algorithm ( ga ) that can search for an appropriate wiring pattern , also optimizing secondary properties of the network for specific types of communication traffic . how to physically wire the network. this may seem like a trivial concern , but flat neighborhood designs do not necessarily have good wiring locality properties and , in the general case , are not regular ( i.e. , often have no symmetry ) . how to perform basic routing between pcs. most network hardware and software assumes a variety of network properties that fnns violate . for example , if you ask pc # 0 for the network address of pc # 1 , you do not get the same answer that you get if you ask pc # 2 the same question . how to take full advantage of extra bandwidth that is available for some ( but not all ) communication paths. what is needed is very similar to channel bonding , however , the standard linux support for channel bonding works in a way that is incompatible with the flat neighborhood topology . well , those are not easy problems to solve , but we managed to solve all but the last within a week or so. the last one is a pain , which translates to " we are writing the paper on it. " we will post more details , including the ga , soon... . klat2 's flat neighborhood network as you can see above , klat2 is large enough that none of the network design , construction , and routing issues are trivial . in fact , we ran the ga on odie -- a cluster of four 600mhz athlons that we built last year. however , here 's the good news : around $ 8,100 for the complete network , including cables single-switch latency on all pairwise communications bisection bandwidth of over 25gb/s -- better than the gb/s options and essentially the same as if we had wire-speed full-cluster-width switches with 4-way-channel-bonding , which would have been very expensive the fnn can be tuned to specific communication patterns ; klat2 's was partially tuned for the row/column patterns used in scalapack we designed the fnn for 64 nodes and added one additional switch for multicast ; however , by placing the two " hot spares " on that switch , they are able to logically replace any faulty machine with only a little extra latency and no rewiring the only thing set in stone is our name .
